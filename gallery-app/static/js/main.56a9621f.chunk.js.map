{"version":3,"sources":["components/Header.js","components/ImageBox.js","components/FoundImages.js","components/LikesImages.js","components/Loading.js","components/ModalImage.js","useScrollBottom.js","useLocalStorage.js","App.js","serviceWorker.js","index.js"],"names":["Header","setQuery","showLikes","setShowLikes","useState","value","setValue","className","onClick","onChange","e","target","onKeyPress","event","key","placeholder","prev","ImageBox","image","toggleLike","isLike","showModal","src","urls","small","alt","alt_description","FoundImages","result","likes","isFetching","length","map","item","findIndex","like","id","LikesImages","Loading","ModalImage","closeModal","zoom","setZoom","isLoading","setIsLoading","modalRef","useRef","useEffect","document","body","style","paddingRight","window","innerWidth","clientWidth","overflow","ref","current","full","regular","onLoad","description","useScrollBottom","onBottom","setOnBottom","onBottomCheck","documentElement","clientHeight","pageYOffset","scrollHeight","addEventListener","removeEventListener","useLocalStorage","localStorage","getItem","JSON","parse","setLikes","setItem","stringify","imageLike","indexLike","slice","App","setResult","query","page","setPage","isModal","setIsModal","setIsFetching","fetchImagesApi","fetch","process","then","response","json","total","total_pages","results","catch","err","console","log","finally","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.56a9621f.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst Header = ({setQuery, showLikes, setShowLikes}) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const keyPressHandler = event => {\r\n    if (event.key === 'Enter') {\r\n      setQuery(value);\r\n    }\r\n  }\r\n\r\n  const clickLogo = () => {\r\n    setShowLikes(false);\r\n  }\r\n\r\n  const clickOptions = () => {\r\n    setShowLikes(prev => !prev);\r\n  }\r\n\r\n  const getClasses = () => {\r\n    return showLikes ? 'options show-likes' : 'options';\r\n  }\r\n  \r\n  return (\r\n    <header className='container header'>\r\n      <div className='logo' onClick={clickLogo}>Gallery <span>App</span></div>\r\n      <div className='search'>\r\n        <input \r\n          className='search-input'\r\n          value={value} \r\n          onChange={e => setValue(e.target.value)}\r\n          onKeyPress={keyPressHandler}\r\n          placeholder='Search...'\r\n        />\r\n      </div>\r\n      <div className={getClasses()} onClick={clickOptions}>Favorites</div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst ImageBox = ({image, toggleLike, isLike, showModal}) => {\r\n  const likeClick = () => {\r\n    toggleLike(image);\r\n  }\r\n\r\n  const imageClick = () => {\r\n    showModal(image);\r\n  }\r\n\r\n  const classLike = () => {\r\n    return isLike ? 'gallery-like like-yes' : 'gallery-like like-no';\r\n  }\r\n\r\n  return (\r\n    <div className='gallery-block'>\r\n      <img src={image.urls.small} alt={image.alt_description} onClick={imageClick}/>\r\n      <div className={classLike()} onClick={likeClick}>‚ù§</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageBox;","import React from 'react';\r\nimport ImageBox from './ImageBox';\r\n\r\nconst FoundImages = ({result, likes, toggleLike, showModal, isFetching}) => {\r\n  return (\r\n    <>\r\n      {\r\n        result.length === 0 \r\n        ? (\r\n          !isFetching && <div className='no-results'>No results</div>\r\n        ) \r\n        : (\r\n          result.map((item) => {\r\n            const isLike = likes.findIndex(like => like.id === item.id) >= 0;\r\n            return <ImageBox key={item.id} image={item} toggleLike={toggleLike} isLike={isLike} showModal={showModal} />\r\n          })\r\n        )\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FoundImages;","import React from 'react';\r\nimport ImageBox from './ImageBox';\r\n\r\nconst LikesImages = ({likes, toggleLike, showModal}) => {\r\n  return (\r\n    <>\r\n      {\r\n        likes.length === 0 \r\n        ? <div className='no-results'>No results</div> \r\n        : likes.map(item => (\r\n          <ImageBox key={item.id} image={item} toggleLike={toggleLike} isLike={true} showModal={showModal} />\r\n        ))\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LikesImages;","import React from 'react';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;","import React, {useState , useEffect, useRef} from 'react';\r\nimport Loading from './Loading';\r\n\r\nconst ModalImage = ({image, closeModal, likes, toggleLike}) => {\r\n  const [zoom, setZoom] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const modalRef = useRef(null);\r\n\r\n  const clickZoom = () => {\r\n    setIsLoading(true);\r\n    setZoom(prev => !prev);\r\n  }\r\n\r\n  const onLoadStatus = () => {\r\n    setIsLoading(false);\r\n  }\r\n\r\n  const clickClose = () => {\r\n    closeModal(null);\r\n  }\r\n\r\n  const clickUnderModal = (event) => {\r\n    if (event.target === modalRef.current) {\r\n      closeModal(null);\r\n    }\r\n  }\r\n\r\n  const getUrl = () => {\r\n    return zoom ? image.urls.full : image.urls.regular;\r\n  }\r\n\r\n  const getClassesImg = () => {\r\n    return zoom ? 'modal-img full' : 'modal-img';\r\n  }\r\n\r\n  const likeClick = () => {\r\n    toggleLike(image);\r\n  }\r\n\r\n  const classLike = () => {\r\n    const isLike = likes.findIndex(like => like.id === image.id) >= 0;\r\n    return isLike ? 'gallery-like like-yes' : 'gallery-like like-no';\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.body.style.paddingRight = window.innerWidth - document.body.clientWidth + 'px';\r\n    document.body.style.overflow = 'hidden';\r\n    return () => {document.body.style = ''};\r\n  }, []);\r\n\r\n  return (\r\n    <div className='modal show' ref={modalRef} onClick={clickUnderModal}>\r\n      <div className='modal-box'>\r\n        <div className='modal-top'>\r\n          <div className={classLike()} onClick={likeClick}>‚ù§</div>\r\n          <button className='btn-close' onClick={clickClose}>√ó</button>\r\n        </div>\r\n        <div className={getClassesImg()}>\r\n          <img src={getUrl()} alt={image.alt_description} onClick={clickZoom} onLoad={onLoadStatus} />\r\n          {isLoading && <Loading/>}\r\n        </div>\r\n        <div className='modal-bottom'>\r\n          <div>{image.description}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalImage;","import {useState, useEffect} from 'react';\r\n\r\nconst useScrollBottom = () => {\r\n  const [onBottom, setOnBottom] = useState(false);\r\n\r\n  const onBottomCheck = () => {\r\n    if (document.documentElement.clientHeight + window.pageYOffset >= document.documentElement.scrollHeight - 50 && !onBottom) {\r\n      setOnBottom(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', onBottomCheck);\r\n    return () => {window.removeEventListener ('scroll', onBottomCheck)};\r\n  }, []);\r\n\r\n  return [onBottom, setOnBottom];\r\n}\r\n\r\nexport default useScrollBottom;","import {useState, useEffect} from 'react';\r\n\r\nconst useLocalStorage = () => {\r\n  const getLikes = () => {\r\n    const likes = localStorage.getItem('likes') ? JSON.parse(localStorage.getItem('likes')) : [];\r\n    return likes;\r\n  }\r\n\r\n  const [likes, setLikes] = useState(getLikes());\r\n\r\n  const toogleLike = (imageLike) => {\r\n    const indexLike = likes.findIndex(item => item.id === imageLike.id);\r\n\r\n    if (indexLike >= 0) {\r\n      setLikes(prev => [...prev.slice(0, indexLike), ...prev.slice(indexLike + 1)]);\r\n    } else {\r\n      setLikes(prev => [...prev, imageLike]);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('likes', JSON.stringify(likes));\r\n  }, [likes]);\r\n\r\n  return [likes, toogleLike];\r\n}\r\n\r\nexport default useLocalStorage;","import React, {useState, useEffect} from 'react';\r\nimport Header from './components/Header';\r\nimport FoundImages from './components/FoundImages';\r\nimport LikesImages from './components/LikesImages';\r\nimport ModalImage from './components/ModalImage';\r\nimport Loading from './components/Loading';\r\nimport useScrollBottom from './useScrollBottom';\r\nimport useLocalStorage from './useLocalStorage';\r\n\r\nfunction App() {\r\n  const [result, setResult] = useState([]);\r\n  const [query, setQuery] = useState('art');\r\n  const [page, setPage] = useState(1);\r\n  const [showLikes, setShowLikes] = useState(false);\r\n  const [isModal, setIsModal] = useState(null);\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [onBottom, setOnBottom] = useScrollBottom();\r\n  const [likes, toggleLike] = useLocalStorage();\r\n\r\n  useEffect(() => {\r\n    setPage(1);\r\n    setShowLikes(false);\r\n    fetchImagesApi(query, 1);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    if (onBottom) {\r\n      if (!showLikes) setPage(prev => prev + 1);\r\n      else setOnBottom(false);\r\n    }\r\n  }, [onBottom]);\r\n\r\n  useEffect(() => {\r\n    if (page !== 1) fetchImagesApi(query, page);\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    fetchImagesApi(query, page);\r\n  }, []);\r\n\r\n  const showModal = (image) => {\r\n    setIsModal(image);\r\n  }\r\n\r\n  const fetchImagesApi = (query, page) => {\r\n    const key = process.env.REACT_APP_CLIENT_ID;\r\n    setIsFetching(true);\r\n    fetch(`https://api.unsplash.com/search/photos?page=${page}&query=${query}&per_page=24&client_id=${key}`)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        if (result.total === 0) {\r\n          setResult([]);\r\n        }\r\n        else if (page <= result.total_pages) {\r\n          if (page === 1) setResult([...result.results]);\r\n          else setResult(prev => [...prev, ...result.results]);\r\n        }\r\n      })\r\n      .catch(err => console.log('Error fetch', err))\r\n      .finally(() => {\r\n        setIsFetching(false);\r\n        setOnBottom(false);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='head'>\r\n        <Header setQuery={setQuery} showLikes={showLikes} setShowLikes={setShowLikes} />\r\n      </div>\r\n      <div className='container'>\r\n        <div className='gallery'>\r\n          {\r\n            showLikes \r\n              ? <LikesImages likes={likes} toggleLike={toggleLike} showModal={showModal} />\r\n              : <FoundImages result={result} likes={likes} toggleLike={toggleLike} showModal={showModal} isFetching={isFetching} />\r\n          }\r\n        </div>\r\n        {isFetching && <Loading/>}\r\n      </div>\r\n      {isModal && <ModalImage image={isModal} closeModal={setIsModal} likes={likes} toggleLike={toggleLike} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}